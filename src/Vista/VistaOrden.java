/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;
import Controlador.OrdenControlador;
import Modelo.Orden;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hassel
 */

public class VistaOrden extends javax.swing.JPanel {
     private final OrdenControlador ordenControlador;
    private Integer idOrdenSeleccionada = null;


    /**
     * Creates new form VistaOrden
     */
    public VistaOrden() {
        initComponents();
         this.ordenControlador = new OrdenControlador();
        cargarDatosTabla();
    }
    
    private void cargarDatosTabla() {
        // Obtener todas las categorias del controlador
        List<Orden> ordenes = ordenControlador.obtenerTodasOrdenes();

        if (ordenes != null) {
            //Obtener el modelo existente de la tabla 
            DefaultTableModel model = (DefaultTableModel) tablaOrden.getModel();
            //Limpiar las filas existentes 
            model.setRowCount(0);

            //Llenar las filas con los datos categorias
            for (Orden ord : ordenes) {
                Object[] row = {
                    ord.getIdOrden(),
                    ord.getId_cuenta(),
                    ord.getFecha_orden()
                };
                model.addRow(row);
            }
        }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        textfecha_orden = new javax.swing.JTextField();
        BuscarOrden = new javax.swing.JTextField();
        textid_cuenta = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Buscar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        Actualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaOrden = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 51, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("id_cuenta ");

        BuscarOrden.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textBuscarKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("fecha_orden");

        Buscar.setText("Buscar");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnbtnGuardar(evt);
            }
        });

        Actualizar.setText("Actualizar");
        Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnActualizar(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnbtnEliminar(evt);
            }
        });

        tablaOrden.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "idOrden", "id_cuenta", "fecha_orden"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaOrden);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BuscarOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textfecha_orden, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textid_cuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 236, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textid_cuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textfecha_orden, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(Actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BuscarOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void accionbtnbtnGuardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnbtnGuardar
        // TODO add your handling code here:     
        String id_cuentaStr = textid_cuenta.getText();
        String fecha_ordenStr = textfecha_orden.getText();

        if (!id_cuentaStr.trim().isEmpty() && !fecha_ordenStr.trim().isEmpty()) {
            try {
                int id_cuenta = Integer.parseInt(id_cuentaStr.trim());
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm");
                LocalDateTime fecha_orden = LocalDateTime.parse(fecha_ordenStr.trim(), formatter);

                ordenControlador.crearOrden(id_cuenta, fecha_orden);
                cargarDatosTabla();
                textid_cuenta.setText("");
                textfecha_orden.setText("");
                javax.swing.JOptionPane.showMessageDialog(this, "Orden guardada exitosamente", "Ã‰xito", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, "Error al guardar la orden: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Por favor, llene todos los campos", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    

    }//GEN-LAST:event_accionbtnbtnGuardar

    private void accionbtnActualizar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnActualizar
        String id_cuenta = textid_cuenta.getText();
String fecha_orden = textfecha_orden.getText();

if (idOrdenSeleccionada != null && !id_cuenta.isEmpty() && !fecha_orden.isEmpty()) { 
    try {
        int id_cuentaInt = Integer.parseInt(id_cuenta.trim());
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        LocalDateTime fechaOrdenDateTime = LocalDateTime.parse(fecha_orden.trim(), formatter);

        ordenControlador.actualizarOrden(idOrdenSeleccionada, id_cuentaInt, fechaOrdenDateTime);
        cargarDatosTabla();

        textid_cuenta.setText("");
        textfecha_orden.setText("");
        idOrdenSeleccionada = null;

        btnEliminar.setEnabled(true);
        btnGuardar.setEnabled(true);

        javax.swing.JOptionPane.showMessageDialog(this, "Orden actualizada exitosamente", "Ã‰xito", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Error al actualizar la orden: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
} else {
    javax.swing.JOptionPane.showMessageDialog(this, "Por favor, llene todos los campos.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
}


    }//GEN-LAST:event_accionbtnActualizar

    private void accionbtnbtnEliminar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnbtnEliminar
        // TODO add your handling code here:
         int filaSeleccionada = tablaOrden.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idOrden= (int) tablaOrden.getValueAt(filaSeleccionada, 0);
            ordenControlador.eliminarOrden(idOrden);
            cargarDatosTabla();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Selecciona una fila para eleiminar.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE); 
        }  
    }    


    private void tablaOrdenMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
          if (evt.getClickCount()== 2) {
            int filaSeleccionada = tablaOrden.getSelectedRow();
            if (filaSeleccionada != -1) {
                int idOrdenSeleccionada = (Integer) tablaOrden.getValueAt(filaSeleccionada, 0);
                int id_cuenta = (Integer) tablaOrden.getValueAt(filaSeleccionada, 1);
                LocalDateTime fecha_orden = (LocalDateTime) tablaOrden.getValueAt(filaSeleccionada, 2);
                
                textid_cuenta.setText(String.valueOf(id_cuenta));
                textfecha_orden.setText(String.valueOf(fecha_orden));
                
                btnEliminar.setEnabled(false);
                btnGuardar.setEnabled(false);
            }
        } 

    }//GEN-LAST:event_accionbtnbtnEliminar

    private void textBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuscarKeyTyped
        // TODO add your handling code here:
        String textoBusqueda = BuscarOrden.getText().trim().toLowerCase();
List<Orden> ordenes = ordenControlador.obtenerTodasOrdenes();

DefaultTableModel modelo = (DefaultTableModel) tablaOrden.getModel();
modelo.setRowCount(0);

if (ordenes != null) {
    for (Orden ord : ordenes) {
        try {
            String idOrden = String.valueOf(ord.getIdOrden()).toLowerCase();
            String idCuenta = String.valueOf(ord.getId_cuenta()).toLowerCase();
            String fechaOrden = ord.getFecha_orden() != null ? ord.getFecha_orden().toString().toLowerCase() : "";

            if (textoBusqueda.isEmpty() ||
                idOrden.contains(textoBusqueda) ||
                idCuenta.contains(textoBusqueda) ||
                fechaOrden.contains(textoBusqueda)) {

                Object[] fila = {
                    ord.getIdOrden(),
                    ord.getId_cuenta(),
                    ord.getFecha_orden()
                };
                modelo.addRow(fila);
            }
        } catch (NullPointerException e) {
            System.out.println("Error al procesar la orden: " + e.getMessage());
        }
    }
}

    }//GEN-LAST:event_textBuscarKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Actualizar;
    private javax.swing.JButton Buscar;
    private javax.swing.JTextField BuscarOrden;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaOrden;
    private javax.swing.JTextField textfecha_orden;
    private javax.swing.JTextField textid_cuenta;
    // End of variables declaration//GEN-END:variables
}
