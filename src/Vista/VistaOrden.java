/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;
import Controlador.Detalle_OrdenControlador;
import Controlador.OrdenControlador;
import Controlador.ProductoControlador;
import Modelo.Detalle_Orden;
import Modelo.Orden;
import Modelo.Producto;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.Timer;

/**
 *
 * @author Hassel
 */

public class VistaOrden extends javax.swing.JPanel {
    private final OrdenControlador ordenControlador;
    private final Detalle_OrdenControlador detalleOrdenControlador;
    private final ProductoControlador productoControlador;
    private Integer idProductoSeleccionado = null;
    private Timer timer;
    private boolean horabd = false;

    public VistaOrden() {
        initComponents();
        this.ordenControlador = new OrdenControlador();
        this.detalleOrdenControlador = new Detalle_OrdenControlador();
        this.productoControlador = new ProductoControlador();

        // Inicialización general
        selectorfecha_orden.setDate(new Date());
        ((JTextField) selectorfecha_orden.getDateEditor().getUiComponent()).setEditable(false);
        
          comboEstado.addItem("Pendiente");
          comboEstado.addItem("Entregado");
          comboEstado.addItem("Cancelado");
          
        limpiar(); // Incluye la carga de combos y tablas
        eventoComboProductos();
        actualizarHora();
    }

    private void limpiar() {
        selectorfecha_orden.setDate(new Date());
        comboProductos.setSelectedIndex(0);
        comboEstado.setSelectedIndex(0);
        textcantidad.setText("");

          // Limpiar la tabla de detalles
        tablaDetalles.setModel(new DefaultTableModel(new Object[][]{}, new String[]{"ID Producto", "Producto", "estado_orden", "Cantidad"}));


        btnEliminar.setEnabled(true);
        btnGuardar.setEnabled(true);
        horabd = false;

        cargarDatosTablaOrdenes();
        cargarProductos();
        actualizarHora();
    }

    private void actualizarHora() {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        sdf.setTimeZone(TimeZone.getTimeZone("America/Managua"));

        if (timer != null) {
            timer.stop();
        }

        if (horabd) {
            return;
        }

        timer = new Timer(1000, e -> {
            Date now = new Date();
            hora.setText(sdf.format(now));
        });
        timer.start();
    }

    private void cargarDatosTablaOrdenes() {
    try {
        List<Orden> ordenes = ordenControlador.obtenerTodasOrdenes();

        DefaultTableModel model = (DefaultTableModel) tablaOrdenes.getModel();
        model.setRowCount(0);

        if (ordenes != null) {
            for (Orden o : ordenes) {
                Object[] row = {
                    o.getIdOrden(),
                    o.getFecha_orden()
                };
                model.addRow(row);
            }
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al cargar las órdenes: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private void cargarProductos() {
       try {
            List<Producto> productos = productoControlador.obtenerTodosProductos();
            comboProductos.removeAllItems();
            comboProductos.addItem("Seleccione un producto");

            for (Producto p : productos) {
                comboProductos.addItem(p.getNombre_producto());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar productos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void eventoComboProductos() {
        comboProductos.addActionListener(e -> {
            int indiceSeleccionado = comboProductos.getSelectedIndex();
            if (indiceSeleccionado <= 0) { // Skip "Seleccione un producto"
                idProductoSeleccionado = null;
                return;
            }
            try {
                List<Producto> productos = productoControlador.obtenerTodosProductos();
                Producto productoSeleccionado = productos.get(indiceSeleccionado - 1);
                idProductoSeleccionado = productoSeleccionado.getId_producto();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al seleccionar producto: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboProductos = new javax.swing.JComboBox<>();
        jlabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaDetalles = new javax.swing.JTable();
        comboEstado = new javax.swing.JComboBox<>();
        jlabel4 = new javax.swing.JLabel();
        jlabel5 = new javax.swing.JLabel();
        textcantidad = new javax.swing.JTextField();
        selectorfecha_orden = new com.toedter.calendar.JDateChooser();
        hora = new javax.swing.JLabel();
        jlabel6 = new javax.swing.JLabel();
        textBuscar = new javax.swing.JTextField();
        jlabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaOrdenes = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnAgregar = new javax.swing.JButton();
        btnQuitarDetalle = new javax.swing.JButton();
        jlabel7 = new javax.swing.JLabel();
        jlabel8 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jlabel10 = new javax.swing.JLabel();
        jlabel11 = new javax.swing.JLabel();
        jlabel12 = new javax.swing.JLabel();
        jlabel13 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 51, 102));

        comboProductos.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        comboProductos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Producto 1", "Producto 2", "Producto 3", "Producto 4" }));

        jlabel3.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel3.setForeground(new java.awt.Color(255, 255, 255));
        jlabel3.setText("Producto");

        tablaDetalles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID Producto", "Producto", "Estado Orden", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaDetalles);

        comboEstado.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N

        jlabel4.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel4.setForeground(new java.awt.Color(255, 255, 255));
        jlabel4.setText("Estado");

        jlabel5.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel5.setForeground(new java.awt.Color(255, 255, 255));
        jlabel5.setText("Cantidad");

        textcantidad.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        textcantidad.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        textcantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textcantidadActionPerformed(evt);
            }
        });

        hora.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        hora.setForeground(new java.awt.Color(255, 255, 255));
        hora.setText("00:00:00");

        jlabel6.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel6.setForeground(new java.awt.Color(255, 255, 255));
        jlabel6.setText("Fecha");

        textBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBuscarActionPerformed(evt);
            }
        });
        textBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textBuscarKeyTyped(evt);
            }
        });

        jlabel9.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel9.setForeground(new java.awt.Color(255, 255, 255));
        jlabel9.setText("Buscar");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/buscar (2).png"))); // NOI18N

        tablaOrdenes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID Orden", "Fecha/Hora"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaOrdenes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaOrdenesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaOrdenes);

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/boton-agregar (1).png"))); // NOI18N
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnAgregar(evt);
            }
        });

        btnQuitarDetalle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/signo-menos.png"))); // NOI18N
        btnQuitarDetalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnQuitarDetalles(evt);
            }
        });

        jlabel7.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel7.setForeground(new java.awt.Color(255, 255, 255));
        jlabel7.setText("Agregar");

        jlabel8.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel8.setForeground(new java.awt.Color(255, 255, 255));
        jlabel8.setText("Quitar Detalles");

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/salvar.png"))); // NOI18N
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaraccionBotonGuardar(evt);
            }
        });

        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/actualizar (1).png"))); // NOI18N
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnActualizar(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/borrar.png"))); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnEliminar(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/escoba (1).png"))); // NOI18N
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnLimpiar(evt);
            }
        });

        jlabel10.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel10.setForeground(new java.awt.Color(255, 255, 255));
        jlabel10.setText("Guardar orden");

        jlabel11.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel11.setForeground(new java.awt.Color(255, 255, 255));
        jlabel11.setText("Actualizar orden");

        jlabel12.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel12.setForeground(new java.awt.Color(255, 255, 255));
        jlabel12.setText("Eliminar orden");

        jlabel13.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel13.setForeground(new java.awt.Color(255, 255, 255));
        jlabel13.setText("Limpiar");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/logo pequeño.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnQuitarDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlabel7)
                    .addComponent(jlabel8)
                    .addComponent(jlabel11)
                    .addComponent(jlabel12)
                    .addComponent(jlabel13)
                    .addComponent(jlabel10))
                .addGap(14, 14, 14))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jlabel7)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnQuitarDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jlabel8)))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jlabel10)
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jlabel11)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jlabel12)))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jlabel13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jlabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jlabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jlabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textcantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jlabel6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectorfecha_orden, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(textBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(hora)
                                .addGap(149, 149, 149)
                                .addComponent(jlabel9))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlabel3)
                    .addComponent(comboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlabel4)
                    .addComponent(jlabel5)
                    .addComponent(textcantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hora)
                            .addComponent(jlabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectorfecha_orden, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlabel6)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textcantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textcantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textcantidadActionPerformed

    private void textBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textBuscarActionPerformed

    private void textBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuscarKeyTyped
        String textoBusqueda = textBuscar.getText().trim().toLowerCase();
        List<Orden> ordenes = ordenControlador.obtenerTodasOrdenes();

        DefaultTableModel modelo = (DefaultTableModel) tablaOrdenes.getModel();
        modelo.setRowCount(0);

        if (ordenes != null) {
            for (Orden o : ordenes) {
                String fechaOrden = o.getFecha_orden().toString().toLowerCase();
                if (textoBusqueda.isEmpty() || fechaOrden.contains(textoBusqueda)) {
                    Object[] fila = {
                        o.getIdOrden(),
                        o.getFecha_orden()
                    };
                    modelo.addRow(fila);
                }
            }
        }
    }//GEN-LAST:event_textBuscarKeyTyped

    private void tablaOrdenesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaOrdenesMouseClicked

        // Verificar si es doble clic
        if (evt.getClickCount() == 2) {
            try {
                // Deshabilitar botones
                btnEliminar.setEnabled(false);
                btnGuardar.setEnabled(false);

                // Obtener la fila seleccionada
                int filaSeleccionada = tablaOrdenes.getSelectedRow();
                if (filaSeleccionada == -1) {
                    JOptionPane.showMessageDialog(this, "Seleccione una orden.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Obtener el ID de la orden seleccionada
                DefaultTableModel modelOrden = (DefaultTableModel) tablaOrdenes.getModel();
                int idOrden = (int) modelOrden.getValueAt(filaSeleccionada, 0);

                // Obtener la orden
                List<Orden> ordenes = ordenControlador.obtenerTodasOrdenes();
                if (ordenes == null || ordenes.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "No se encontraron órdenes.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Orden ordenSeleccionada = null;
                for (Orden o : ordenes) {
                    if (o.getIdOrden() == idOrden) {
                        ordenSeleccionada = o;
                        break;
                    }
                }

                if (ordenSeleccionada == null) {
                    JOptionPane.showMessageDialog(this, "Orden no encontrada.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Detener el timer si existe
                if (timer != null) {
                    timer.stop();
                }

                // Asignar la hora
                horabd = true;
                java.text.SimpleDateFormat horaFormato = new java.text.SimpleDateFormat("HH:mm:ss");
                Date fechaOrden = ordenSeleccionada.getFecha_orden();
                if (fechaOrden == null) {
                    JOptionPane.showMessageDialog(this, "Fecha de la orden no válida.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String horaOrden = horaFormato.format(fechaOrden);
                hora.setText(horaOrden);

                // Asignar fecha al selector
                selectorfecha_orden.setDate(fechaOrden);

                // Limpiar tabla de detalles
                DefaultTableModel modelDetalles = (DefaultTableModel) tablaDetalles.getModel();
                modelDetalles.setRowCount(0);

                // Cargar detalles de la orden
                List<Detalle_Orden> detalles = detalleOrdenControlador.obtenerTodosDetalleOrden();
                if (detalles == null || detalles.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "No se encontraron detalles para esta orden.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                for (Detalle_Orden detalle : detalles) {
                    if (detalle.getIdOrden() == idOrden) {
                        Producto Producto = productoControlador.obtenerProductoPorId(detalle.getId_producto());
                        String nombre_producto = (Producto != null) ? Producto.getNombre_producto() : "Desconocido";

                        Object[] fila = {
                            detalle.getId_producto(),
                            nombre_producto,
                            detalle.getEstado_orden(),
                            detalle.getCantidad()
                        };
                        modelDetalles.addRow(fila);
                    }
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al cargar los datos de la orden: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace(); // Imprimir el stack trace para depuración
            }
        }
    }//GEN-LAST:event_tablaOrdenesMouseClicked

    private void accionbtnAgregar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnAgregar
        try {
            int indiceSeleccionado = comboProductos.getSelectedIndex();
            if (indiceSeleccionado <= 0) {
                JOptionPane.showMessageDialog(this, "Seleccione un producto.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            List<Producto> productos = productoControlador.obtenerTodosProductos();
            Producto productoSeleccionado = productos.get(indiceSeleccionado - 1);

            String estado_orden = (String) comboEstado.getSelectedItem();
            if (estado_orden == null || estado_orden.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Seleccione un estado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int cantidad;
            try {
                cantidad = Integer.parseInt(textcantidad.getText().trim());
                if (cantidad <= 0) {
                    JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor a cero.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Ingrese una cantidad válida.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tablaDetalles.getModel();
            Object[] row = {
                productoSeleccionado.getId_producto(),
                productoSeleccionado.getNombre_producto(),
                estado_orden,
                cantidad
            };
            model.addRow(row);

            comboProductos.setSelectedIndex(0);
            comboEstado.setSelectedIndex(0);
            textcantidad.setText("");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al agregar el detalle: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_accionbtnAgregar

    private void accionbtnQuitarDetalles(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnQuitarDetalles
        try {
            int filaSeleccionada = tablaDetalles.getSelectedRow();
            if (filaSeleccionada == -1) {
                JOptionPane.showMessageDialog(this, "Seleccione un detalle para quitar.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tablaDetalles.getModel();
            model.removeRow(filaSeleccionada);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al quitar el detalle: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_accionbtnQuitarDetalles

    private void btnGuardaraccionBotonGuardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaraccionBotonGuardar
        try {
            Date fechaOrden = selectorfecha_orden.getDate();
            if (fechaOrden == null) {
                JOptionPane.showMessageDialog(this, "Seleccione una fecha.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tablaDetalles.getModel();
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Agregue al menos un producto a la orden.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Crear lista de detalles
            List<Detalle_Orden> detalles = new ArrayList<>();
            for (int i = 0; i < model.getRowCount(); i++) {
                int idProd = (int) model.getValueAt(i, 0);
                String estado = (String) model.getValueAt(i, 2);
                int cantidad = (int) model.getValueAt(i, 3);

                // Crear objeto DetalleOrden
                Detalle_Orden detalle = new Detalle_Orden();
                detalle.setId_producto(idProd);
                detalle.setEstado_orden(estado);
                detalle.setCantidad(cantidad);
                detalles.add(detalle);
            }

            // Crear y guardar la orden
            ordenControlador.crearOrden(fechaOrden, detalles);
            limpiar();
            cargarDatosTablaOrdenes();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al guardar la orden: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardaraccionBotonGuardar

    private void accionbtnActualizar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnActualizar
        try {
            int filaSeleccionada = tablaOrdenes.getSelectedRow();
            if (filaSeleccionada == -1) {
                JOptionPane.showMessageDialog(this, "Seleccione una orden.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Obtener el idOrden de la fila seleccionada
            DefaultTableModel modelOrdenes = (DefaultTableModel) tablaOrdenes.getModel();
            int idOrden = (int) modelOrdenes.getValueAt(filaSeleccionada, 0);

            // Obtener la fecha seleccionada
            Date fecha_orden = selectorfecha_orden.getDate();
            if (fecha_orden == null) {
                JOptionPane.showMessageDialog(this, "Seleccione una fecha.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Obtener los detalles de la tabla tablaDetalles
            DefaultTableModel modelDetalles = (DefaultTableModel) tablaDetalles.getModel();
            int rowCount = modelDetalles.getRowCount();
            if (rowCount == 0) {
                JOptionPane.showMessageDialog(this, "Agregue al menos un producto a la venta.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Actualizar la orden principal
            ordenControlador.actualizarOrden(idOrden, fecha_orden);

            // Eliminar los detalles antiguos de la orden
            List<Detalle_Orden> detallesAntiguos = detalleOrdenControlador.obtenerTodosDetalleOrden();
            if (detallesAntiguos != null) {
                for (Detalle_Orden detalle : detallesAntiguos) {
                    if (detalle.getIdOrden()== idOrden) {
                        detalleOrdenControlador.eliminarDetalleOrden(detalle.getId_detalle_orden());
                    }
                }
            }

            List<Detalle_Orden> nuevosDetalles = new ArrayList<>();
            for (int i = 0; i < modelDetalles.getRowCount(); i++) {
                int idProd = (int) modelDetalles.getValueAt(i, 0);
                String estado = (String) modelDetalles.getValueAt(i, 2);
                int cantidad = (int) modelDetalles.getValueAt(i, 3);

                // Crear y guardar el nuevo detalle
                Detalle_Orden detalle = new Detalle_Orden();
                detalle.setIdOrden(idOrden);
                detalle.setId_producto(idProd);
                detalle.setEstado_orden(estado);
                detalle.setCantidad(cantidad);
                nuevosDetalles.add(detalle);
                detalleOrdenControlador.crearDetalleOrden(idOrden, idProd, estado, cantidad);
            }
            // Limpiar la tabla de detalles y el formulario
            tablaDetalles.setModel(new DefaultTableModel(new Object[][]{}, new String[]{"ID Producto", "Producto", "estado_orden", "Cantidad"}));
            limpiar();

            // Recargar la tabla de ordenes
            cargarDatosTablaOrdenes();

            // Habilitar botones nuevamente
            btnEliminar.setEnabled(true);
            btnGuardar.setEnabled(true);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_accionbtnActualizar

    private void accionbtnEliminar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnEliminar
        try {
            int fila = tablaOrdenes.getSelectedRow();
            if (fila == -1) {
                JOptionPane.showMessageDialog(this, "Seleccione una orden para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tablaOrdenes.getModel();
            int idOrden = (int) model.getValueAt(fila, 0);

            int confirm = JOptionPane.showConfirmDialog(this,
                "¿Desea eliminar la orden con ID " + idOrden + "?", "Confirmar eliminación",
                JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                List<Detalle_Orden> detalles = detalleOrdenControlador.obtenerTodosDetalleOrden();
                for (Detalle_Orden d : detalles) {
                    if (d.getIdOrden() == idOrden) {
                        detalleOrdenControlador.eliminarDetalleOrden(d.getId_detalle_orden());
                    }
                }
                ordenControlador.eliminarOrden(idOrden);
                limpiar();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar la orden: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_accionbtnEliminar

    private void accionbtnLimpiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnLimpiar
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_accionbtnLimpiar


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnQuitarDetalle;
    private javax.swing.JComboBox<String> comboEstado;
    private javax.swing.JComboBox<String> comboProductos;
    private javax.swing.JLabel hora;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jlabel10;
    private javax.swing.JLabel jlabel11;
    private javax.swing.JLabel jlabel12;
    private javax.swing.JLabel jlabel13;
    private javax.swing.JLabel jlabel3;
    private javax.swing.JLabel jlabel4;
    private javax.swing.JLabel jlabel5;
    private javax.swing.JLabel jlabel6;
    private javax.swing.JLabel jlabel7;
    private javax.swing.JLabel jlabel8;
    private javax.swing.JLabel jlabel9;
    private com.toedter.calendar.JDateChooser selectorfecha_orden;
    private javax.swing.JTable tablaDetalles;
    private javax.swing.JTable tablaOrdenes;
    private javax.swing.JTextField textBuscar;
    private javax.swing.JTextField textcantidad;
    // End of variables declaration//GEN-END:variables
}
