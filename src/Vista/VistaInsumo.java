/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;
import Controlador.InsumoControlador;
import Controlador.Detalle_InsumoControlador;
import Modelo.Insumo;
import Modelo.Detalle_Insumo;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.Timer;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.util.TimeZone;
/**
 *
 * @author HP 17-CN0
 */
public class VistaInsumo extends javax.swing.JPanel {
    private final InsumoControlador insumoControlador;
    private final Detalle_InsumoControlador detalle_insumoControlador;
    private Integer idInsumoSeleccionado = null;
    private Timer timer; // Variable de instancia para el Timer
    private boolean horabd = false;
    /**
     * Creates new form VistaInsumo
     */
    public VistaInsumo() {
        initComponents();
        this.insumoControlador = new InsumoControlador();
        this.detalle_insumoControlador = new Detalle_InsumoControlador();

        selectorfechaInsumo.setDate(new Date());
        ((JTextField) selectorfechaInsumo.getDateEditor().getUiComponent()).setEditable(false);

        limpiar();
        actualizarHora();
    }
    
    private void limpiar() {
        textBuscar.setText("");
        selectorfechaInsumo.setDate(new Date());

        // Limpiar las filas vacías de tablaDetalles
        DefaultTableModel modelDetalles = (DefaultTableModel) tablaDetalles.getModel();
        modelDetalles.setRowCount(0);

        // Limpiar la tabla de detalles
        tablaDetalles.setModel(new DefaultTableModel(new Object[][]{}, new String[]{"Nombre", "Precio Insumo", "Cantidad", "Subtotal"}));

        btnEliminar.setEnabled(true);
        btnGuardar.setEnabled(true);

        horabd = false; // Restablece para mostrar hora actual
        cargarDatosTabla();
        actualizarHora(); // Vuelve a iniciar el timer
    }
    
    private void actualizarHora() {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        sdf.setTimeZone(TimeZone.getTimeZone("America/Managua"));

        // Detener el timer anterior si existe
        if (timer != null) {
            timer.stop();
        }

        if (horabd) {
            return; // No actualiza la hora si está cargada desde la base de datos
        }

        timer = new Timer(1000, e -> {
            Date now = new Date();
            hora.setText(sdf.format(now));
        });
        timer.start();
    }
    
    
   public void cargarDatosTabla() {
        //Obtener todas las categorias del controlador
        List<Insumo> insumos = insumoControlador.obtenerTodosInsumos();
        if (insumos != null) {
            // obtener el modelo existente de la tabla
            DefaultTableModel model = (DefaultTableModel) tablainsumo.getModel();
            model.setRowCount(0);
            //llenar las filas con los datos de categorias  
            for (Insumo ins : insumos) {
                Object[] row = {
                    ins.getId_insumo(),
                    ins.getFecha_insumo(),
                    ins.getTotal_insumo()
                };
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        textNombreInsumo = new javax.swing.JTextField();
        textPrecioInsumo = new javax.swing.JTextField();
        textBuscar = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablainsumo = new javax.swing.JTable();
        selectorfechaInsumo = new com.toedter.calendar.JDateChooser();
        hora = new javax.swing.JLabel();
        textCantidad = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaDetalles = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jlabel7 = new javax.swing.JLabel();
        jlabel8 = new javax.swing.JLabel();
        jlabel10 = new javax.swing.JLabel();
        jlabel11 = new javax.swing.JLabel();
        jlabel12 = new javax.swing.JLabel();
        jlabel13 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        btnQuitarDetalle = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jlabel9 = new javax.swing.JLabel();
        jlabel14 = new javax.swing.JLabel();
        jlabel15 = new javax.swing.JLabel();
        jlabel16 = new javax.swing.JLabel();
        jlabel17 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        textNombreInsumo.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        textNombreInsumo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        textNombreInsumo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNombreInsumoActionPerformed(evt);
            }
        });

        textPrecioInsumo.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        textPrecioInsumo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        textBuscar.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        textBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBuscarActionPerformed(evt);
            }
        });
        textBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textBuscartextbuscarKeyTyped(evt);
            }
        });

        tablainsumo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id_Insumo", "Fecha Hora", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablainsumo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablainsumoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablainsumo);

        hora.setForeground(new java.awt.Color(255, 255, 255));
        hora.setText("00:00:00");

        textCantidad.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        textCantidad.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tablaDetalles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre ", "Precio Insumo", "Cantidad", "Subtotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablaDetalles);

        jPanel2.setBackground(new java.awt.Color(0, 0, 51));

        jlabel7.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel7.setForeground(new java.awt.Color(255, 255, 255));
        jlabel7.setText("Agregar");

        jlabel8.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel8.setForeground(new java.awt.Color(255, 255, 255));
        jlabel8.setText("Quitar Detalles");

        jlabel10.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel10.setForeground(new java.awt.Color(255, 255, 255));
        jlabel10.setText("Guardar Insumo");

        jlabel11.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel11.setForeground(new java.awt.Color(255, 255, 255));
        jlabel11.setText("Actualizar Insumo");

        jlabel12.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel12.setForeground(new java.awt.Color(255, 255, 255));
        jlabel12.setText("Eliminar Insumo");

        jlabel13.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel13.setForeground(new java.awt.Color(255, 255, 255));
        jlabel13.setText("Limpiar");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/logo pequeño.png"))); // NOI18N

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/boton-agregar (1).png"))); // NOI18N
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregaraccionbotonAgregar(evt);
            }
        });

        btnQuitarDetalle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/signo-menos.png"))); // NOI18N
        btnQuitarDetalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarDetalleActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/salvar.png"))); // NOI18N
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnGuardar(evt);
            }
        });

        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/actualizar (1).png"))); // NOI18N
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/borrar.png"))); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/escoba (1).png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnQuitarDetalle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlabel7)
                            .addComponent(jlabel8)
                            .addComponent(jlabel11)
                            .addComponent(jlabel12)
                            .addComponent(jlabel13)
                            .addComponent(jlabel10))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jlabel7))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnQuitarDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jlabel8)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jlabel10))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jlabel11)
                        .addGap(29, 29, 29))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jlabel12))
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jlabel13)))
                .addGap(30, 30, 30)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jlabel9.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel9.setForeground(new java.awt.Color(255, 255, 255));
        jlabel9.setText("Nombre");

        jlabel14.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel14.setForeground(new java.awt.Color(255, 255, 255));
        jlabel14.setText("Precio");

        jlabel15.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel15.setForeground(new java.awt.Color(255, 255, 255));
        jlabel15.setText("Cantidad");

        jlabel16.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel16.setForeground(new java.awt.Color(255, 255, 255));
        jlabel16.setText("Fecha");

        jlabel17.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        jlabel17.setForeground(new java.awt.Color(255, 255, 255));
        jlabel17.setText("Buscar");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/buscar (2).png"))); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/buscar (2).png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 12, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 704, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jlabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textNombreInsumo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jlabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textPrecioInsumo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jlabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jlabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectorfechaInsumo, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(hora)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jlabel17))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(textBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)))
                        .addGap(58, 58, 58)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(435, Short.MAX_VALUE)
                    .addComponent(jLabel7)
                    .addContainerGap(435, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(textNombreInsumo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlabel9)
                    .addComponent(jlabel14)
                    .addComponent(textPrecioInsumo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlabel15)
                    .addComponent(textCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jlabel16))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(hora)
                                .addGap(7, 7, 7)
                                .addComponent(selectorfechaInsumo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlabel17)
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                            .addComponent(textBuscar))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(234, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(223, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textNombreInsumoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNombreInsumoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNombreInsumoActionPerformed

    private void textBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textBuscarActionPerformed

    private void textBuscartextbuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuscartextbuscarKeyTyped
        // TODO add your handling code here:
        String textoBusqueda = textBuscar.getText().trim().toLowerCase();
        List<Insumo> insumos = insumoControlador.obtenerTodosInsumos();

        DefaultTableModel modelo = (DefaultTableModel) tablainsumo.getModel();
        modelo.setRowCount(0);

        if (insumos != null) {
            for (Insumo i : insumos) {
                String fecha_insumo = i.getFecha_insumo().toString().toLowerCase();
                if (textoBusqueda.isEmpty() || fecha_insumo.contains(textoBusqueda)) {
                    Object[] fila = {
                        i.getId_insumo(),
                        i.getFecha_insumo(),
                        i.getTotal_insumo()
                    };
                    modelo.addRow(fila);
                }
            }
        }
    }//GEN-LAST:event_textBuscartextbuscarKeyTyped

    private void tablainsumoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablainsumoMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
        int filaSeleccionada = tablainsumo.getSelectedRow();
        if (filaSeleccionada != -1) {
            idInsumoSeleccionado = (int) tablainsumo.getValueAt(filaSeleccionada, 0);
            Date fechaInsumo = (Date) tablainsumo.getValueAt(filaSeleccionada, 1);
            Float totalInsumo = (Float) tablainsumo.getValueAt(filaSeleccionada, 2);

            selectorfechaInsumo.setDate(fechaInsumo);

            // Cargar detalles del insumo seleccionado
            DefaultTableModel modelDetalles = (DefaultTableModel) tablaDetalles.getModel();
            modelDetalles.setRowCount(0);
            List<Detalle_Insumo> detalles = detalle_insumoControlador.obtenerTodosDetalleInsumo();
            if (detalles != null) {
                for (Detalle_Insumo detalle : detalles) {
                    if (detalle.getId_insumo() == idInsumoSeleccionado) {
                        Object[] fila = {
                            detalle.getNombre_insumo(),
                            detalle.getPrecio_insumo(),
                            detalle.getCantidad_insumo(),
                            detalle.getPrecio_insumo() * detalle.getCantidad_insumo()
                        };
                        modelDetalles.addRow(fila);
                    }
                }
            }

            btnEliminar.setEnabled(true);
            btnActualizar.setEnabled(true);
        }
    }
    }//GEN-LAST:event_tablainsumoMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = tablainsumo.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idInsumo = (int) tablainsumo.getValueAt(filaSeleccionada, 0);
            insumoControlador.eliminarInsumo(idInsumo);
            cargarDatosTabla();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Selecciona una fila para eleiminar.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        try {
            // Obtener la fila seleccionada en la tabla de insumos
            int filaSeleccionada = tablainsumo.getSelectedRow();
            if (filaSeleccionada == -1) {
                JOptionPane.showMessageDialog(this, "Seleccione un insumo para actualizar.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener el idInsumo de la fila seleccionada
            DefaultTableModel modelInsumos = (DefaultTableModel) tablainsumo.getModel();
            int id_insumo = (int) modelInsumos.getValueAt(filaSeleccionada, 0);

            // Obtener la fecha
            Date fechaInsumo = selectorfechaInsumo.getDate();
            if (fechaInsumo == null) {
                JOptionPane.showMessageDialog(this, "Seleccione una fecha válida.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener los detalles desde la tablaDetalles
            DefaultTableModel modelDetalles = (DefaultTableModel) tablaDetalles.getModel();
            int rowCount = modelDetalles.getRowCount();
            if (rowCount == 0) {
                JOptionPane.showMessageDialog(this, "Agregue al menos un detalle de insumo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Calcular total del insumo
            float totalInsumo = 0;
            for (int i = 0; i < rowCount; i++) {
                totalInsumo += ((Number) modelDetalles.getValueAt(i, 3)).floatValue(); // Subtotal en columna 3
            }

            // Actualizar insumo principal
            insumoControlador.actualizarInsumo(id_insumo, fechaInsumo, totalInsumo);

            // Eliminar detalles antiguos
            List<Detalle_Insumo> detallesAntiguos = detalle_insumoControlador.obtenerTodosDetalleInsumo();
            for (Detalle_Insumo detalle : detallesAntiguos) {
                if (detalle.getId_insumo() == id_insumo) {
                    detalle_insumoControlador.eliminarDetalleInsumo(detalle.getId_detalle_insumo());
                }
            }

            // Insertar nuevos detalles
            List<Detalle_Insumo> nuevosDetalles = new ArrayList<>();
            for (int i = 0; i < rowCount; i++) {
                int id_producto = (int) modelDetalles.getValueAt(i, 0);
                String nombre = (String) modelDetalles.getValueAt(i, 2);
                float precio = ((Number) modelDetalles.getValueAt(i, 3)).floatValue();
                int cantidad = (int) modelDetalles.getValueAt(i, 4);

                Detalle_Insumo detalle = new Detalle_Insumo();
                detalle.setId_insumo(id_insumo);
                detalle.setId_producto(id_producto);
                detalle.setNombre_insumo(nombre);
                detalle.setPrecio_insumo(precio);
                detalle.setCantidad_insumo(cantidad);
                detalle_insumoControlador.crearDetalleInsumo(id_insumo, id_producto, nombre, precio, cantidad);
            }

            // Limpiar tabla de detalles y formulario
            tablaDetalles.setModel(new DefaultTableModel(new Object[][]{}, new String[]{"Nombre", "Precio", "Cantidad", "Subtotal"}));
            limpiar();

            // Recargar tabla principal
            cargarDatosTabla();

            JOptionPane.showMessageDialog(this, "Insumo actualizado correctamente.");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar el insumo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void accionbtnGuardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnGuardar
        try {
            // Obtener la fecha del selector
            Date fecha_insumo = selectorfechaInsumo.getDate();
            if (fecha_insumo == null) {
                JOptionPane.showMessageDialog(this, "Seleccione una fecha para el insumo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener los detalles de la tabla
            DefaultTableModel modelDetalles = (DefaultTableModel) tablaDetalles.getModel();
            int rowCount = modelDetalles.getRowCount();
            if (rowCount == 0) {
                JOptionPane.showMessageDialog(this, "Agregue al menos un insumo al detalle.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            List<Detalle_Insumo> detalles = new ArrayList<>();
            float total_insumo = 0;

            for (int i = 0; i < rowCount; i++) {
                String nombreInsumo = modelDetalles.getValueAt(i, 0).toString();
                float precio = ((Number) modelDetalles.getValueAt(i, 1)).floatValue();
                float cantidad = ((Number) modelDetalles.getValueAt(i, 2)).floatValue();
                float subtotal = ((Number) modelDetalles.getValueAt(i, 3)).floatValue();

                Detalle_Insumo detalle = new Detalle_Insumo();
                detalle.setNombre_insumo(nombreInsumo);
                detalle.setPrecio_insumo(precio);
                detalle.setCantidad_insumo(cantidad);
                detalles.add(detalle);
                total_insumo += subtotal;
            }

            // Llamar al controlador para guardar el insumo y sus detalles
            insumoControlador.crearInsumo(fecha_insumo, total_insumo, detalles);

            limpiar();
            cargarDatosTabla();

        } catch (Exception e) {
            e.printStackTrace(); // Imprimir stack trace para depuración
            JOptionPane.showMessageDialog(this, "Error al guardar el insumo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_accionbtnGuardar

    private void btnQuitarDetalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarDetalleActionPerformed
        // TODO add your handling code here:
        try {
            // Obtener el índice de la fila seleccionada en tablaDetalles
            int filaSeleccionada = tablaDetalles.getSelectedRow();
            if (filaSeleccionada == -1) {
                JOptionPane.showMessageDialog(this, "Seleccione un detalle para quitar.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Eliminar la fila seleccionada del modelo de la tabla
            DefaultTableModel model = (DefaultTableModel) tablaDetalles.getModel();
            model.removeRow(filaSeleccionada);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al quitar el detalle: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnQuitarDetalleActionPerformed

    private void btnAgregaraccionbotonAgregar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregaraccionbotonAgregar
        // TODO add your handling code here:
        try {
            // Obtener y validar el nombre del insumo
            String nombre = textNombreInsumo.getText().trim();
            if (nombre.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ingrese el nombre del insumo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener y validar el precio
            String precioStr = textPrecioInsumo.getText().trim();
            if (precioStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ingrese el precio del insumo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            float precio;
            try {
                precio = Float.parseFloat(precioStr);
                if (precio <= 0) {
                    JOptionPane.showMessageDialog(this, "El precio debe ser mayor a 0.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El precio debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener y validar la cantidad
            String cantidadStr = textCantidad.getText().trim();
            if (cantidadStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ingrese la cantidad del insumo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            float cantidad;
            try {
                cantidad = Float.parseFloat(cantidadStr);
                if (cantidad <= 0) {
                    JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor a 0.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Calcular subtotal
            float subtotal = precio * cantidad;

            // Agregar los datos a la tabla
            DefaultTableModel model = (DefaultTableModel) tablaDetalles.getModel();
            Object[] fila = {nombre, precio, cantidad, subtotal};
            model.addRow(fila);

            // Limpiar campos
            textNombreInsumo.setText("");
            textPrecioInsumo.setText("");
            textCantidad.setText("");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al agregar el insumo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregaraccionbotonAgregar


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnQuitarDetalle;
    private javax.swing.JLabel hora;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jlabel10;
    private javax.swing.JLabel jlabel11;
    private javax.swing.JLabel jlabel12;
    private javax.swing.JLabel jlabel13;
    private javax.swing.JLabel jlabel14;
    private javax.swing.JLabel jlabel15;
    private javax.swing.JLabel jlabel16;
    private javax.swing.JLabel jlabel17;
    private javax.swing.JLabel jlabel7;
    private javax.swing.JLabel jlabel8;
    private javax.swing.JLabel jlabel9;
    private com.toedter.calendar.JDateChooser selectorfechaInsumo;
    private javax.swing.JTable tablaDetalles;
    private javax.swing.JTable tablainsumo;
    private javax.swing.JTextField textBuscar;
    private javax.swing.JTextField textCantidad;
    private javax.swing.JTextField textNombreInsumo;
    private javax.swing.JTextField textPrecioInsumo;
    // End of variables declaration//GEN-END:variables
}
